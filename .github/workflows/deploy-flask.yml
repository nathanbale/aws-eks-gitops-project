name: Build, Test, and Deploy Flask App to EKS

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      run: |
        IMAGE=${{ secrets.DOCKER_USERNAME }}/flask-app:latest
        docker build -t $IMAGE .
        docker push $IMAGE

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name devops-eks-cluster --region us-east-1

    - name: Deploy to Staging
      run: |
        kubectl apply -f flask-deployment-staging.yaml -n staging
        kubectl rollout status deployment/flask-deployment-staging -n staging

    - name: Health check staging
      run: |
        echo "Checking if staging environment is responding..."
        STAGING_URL=$(kubectl get svc flask-service-staging -n staging -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        echo "Testing http://$STAGING_URL"
        for i in {1..10}; do
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://$STAGING_URL)
          if [ "$STATUS" = "200" ]; then
            echo "✅ Staging is healthy!"
            exit 0
          fi
          echo "Attempt $i/10 failed (HTTP $STATUS), retrying in 10s..."
          sleep 10
        done
        echo "❌ Staging failed health check. Aborting pipeline."
        exit 1

    - name: Deploy to Production
      if: success()
      run: |
        kubectl apply -f flask-deployment-prod.yaml -n production
        kubectl rollout status deployment/flask-deployment-prod -n production
